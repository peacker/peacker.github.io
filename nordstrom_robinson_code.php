<?php
  include "page_template.html"
?>

<div id="temp-content" style="display: none;">
<h3>The Nordstrom-Robinson code</h3>
<hr>
<br>

<pre>
<code class="magma">
//////////////////////////////////////////////////////////////////////////////
// Work done by PHD student Emanuele Bellini,                               //
// University of Trento, 2014.                                              //
//                               Emanuele Bellini, 2014                     //
//////////////////////////////////////////////////////////////////////////////

intrinsic NordstromRobinsonCode() -> ModMatFldElt
{
Return the Nordstrom-Robinson code in the form of a binary 16x256 matrix.
}
/*
From: Huffman-Pless, "Fundamentals of Error Correcting Codes", 
2.3.4 - The Nordstrom–Robinson code 

The existence of the Nordstrom–Robinson code shows that 
A_2(16,6) = 256. 

TO USE IT:

NRC := NordstromRobinsonCode() ;

To check the minimum distance is 6:

min := 16 ;
for i in [1..Nrows(NRC)] do
  for j in [i+1..Nrows(NRC)-1] do
    if Weight(NRC[i] + NRC[j]) lt min then
      min := Weight(NRC[i] + NRC[j]) ;
    end if ;
  end for ;
end for ;
*/

local C ;    // Extended Golay code
local G ;    // Generator matrix of C
local v ;    // vector of 24 bits
local CT ;   // subcode of C of 32 codewords with 0 in the first 8 components
local c ;    // list of 8 special codewords to create the cosets of CT
local CC ;   // list of 8 cosets of CT
local N ;    // concatenation of the cosets CC[i] (256 codewords of length 24)
local N16 ;  // Nordstrom-Robinson code: 
             // - punturing of N in the first 8 components
             // - 256 codewords 
             // - length 16
             // - distance 6

  /////////
  // STEP 1 - Let C be the [24, 12, 8] extended binary Golay code
  /////////

  C := GolayCode(GF(2),true) ;
  /*
  [24, 12, 8] "Extended Golay Code" Linear Code over GF(2)
  Generator matrix:
  [1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 1]
  [0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 0 1 0 0 1 0]
  [0 0 1 0 0 0 0 0 0 0 0 0 1 1 0 1 0 0 1 0 1 0 1 1]
  [0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 1 1 1 0 1 1 0]
  [0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 0 1 1 0 1 1 0 0 1]
  [0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 0 1 1 0 1 1 0 1]
  [0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 0 1 1 0 1 1 1]
  [0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 1 0 1 1 1 1 0 0 0]
  [0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 1 0 1 1 1 1 0 0]
  [0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 1 0 1 1 1 1 0]
  [0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 1 0 1]
  [0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 1 1]
  */


  /////////
  // STEP 2 - Let C be the [24, 12, 8] extended binary Golay code
  //          chosen to contain the weight 8 codeword c = 11...100...0
  /////////

  G := GeneratorMatrix(C) ;
  /*
  G;
  [1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 1]
  [0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 0 1 0 0 1 0]
  [0 0 1 0 0 0 0 0 0 0 0 0 1 1 0 1 0 0 1 0 1 0 1 1]
  [0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 1 1 1 0 1 1 0]
  [0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 0 1 1 0 1 1 0 0 1]
  [0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 0 1 1 0 1 1 0 1]
  [0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 0 1 1 0 1 1 1]
  [0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 1 0 1 1 1 1 0 0 0]
  [0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 1 0 1 1 1 1 0 0]
  [0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 1 0 1 1 1 1 0]
  [0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 1 0 1]
  [0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 1 1]
  */

  G := SwapColumns(G,2,13) ;
  G := SwapColumns(G,3,15) ;
  G := SwapColumns(G,4,17) ;
  G := SwapColumns(G,5,18) ;
  G := SwapColumns(G,6,19) ;
  G := SwapColumns(G,7,23) ;
  G := SwapColumns(G,8,24) ;
  /*
  G;
  [1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
  [0 1 1 1 0 0 1 0 0 0 0 0 1 1 0 1 0 0 0 1 0 0 0 0]
  [0 1 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 1 0 0 0]
  [0 1 0 0 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 1 0 1 0 0]
  [0 1 0 1 1 0 0 1 0 0 0 0 0 1 0 0 0 1 0 1 1 0 0 0]
  [0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 0 0 0 1 0 1 1 0 0]
  [0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 1 0]
  [0 1 1 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 1]
  [0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 1 0 0 0 1 1 1 0 0]
  [0 0 1 1 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 0 0]
  [0 1 1 1 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0]
  [0 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 0 0 0 0 0 1 0 0]
  */

  C := LinearCode(G) ;
  v := Vector(GF(2),[1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) ;
  /*
  v;
  (1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
  v in C ;
  true
  */


  /////////
  // STEP 3 - Let C(T) be the subcode of C which is zero on T 
  //          (T is the set consisting of the first eight coordinates)
  /////////

  CT := [] ;
  i := 1 ;
  for c in C do
    if c[1] eq 0 and
       c[2] eq 0 and
       c[3] eq 0 and
       c[4] eq 0 and
       c[5] eq 0 and
       c[6] eq 0 and
       c[7] eq 0 and
       c[8] eq 0 then
      CT[i] := c ;
      i := i + 1 ;
    end if ;
  end for ;
  /*
  CT;
  [
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0),
      (0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 1 0 1 1 1 0 1 1 0),
      (0 0 0 0 0 0 0 0 1 1 0 0 0 1 1 1 1 0 0 0 1 0 1 0),
      (0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 1 1 1 1 1 0 0),
      (0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 0 0 1 1 1 1 1),
      (0 0 0 0 0 0 0 0 1 1 1 0 0 0 1 0 0 1 1 0 1 0 0 1),
      (0 0 0 0 0 0 0 0 1 0 1 0 0 1 1 0 1 0 0 1 0 1 0 1),
      (0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 1 1 1 0 0 0 1 1),
      (0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 1 0 0 1 0 1 1 0 0),
      (0 0 0 0 0 0 0 0 1 0 1 1 0 1 0 0 0 1 0 1 1 0 1 0),
      (0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 0 1 0 0 1 1 0),
      (0 0 0 0 0 0 0 0 0 1 1 1 0 0 1 1 1 1 0 1 0 0 0 0),
      (0 0 0 0 0 0 0 0 0 1 0 1 0 1 1 0 0 0 1 1 0 0 1 1),
      (0 0 0 0 0 0 0 0 1 1 0 1 0 1 0 1 0 1 0 0 0 1 0 1),
      (0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 1 0 1 1 1 0 0 1),
      (0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 1 0 0 1 1 1 1),
      (0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 0 1 0 1 1 0),
      (0 0 0 0 0 0 0 0 1 0 0 1 1 1 1 0 1 1 1 0 0 0 0 0),
      (0 0 0 0 0 0 0 0 1 1 0 1 1 0 1 0 0 0 0 1 1 1 0 0),
      (0 0 0 0 0 0 0 0 0 1 0 1 1 0 0 1 0 1 1 0 1 0 1 0),
      (0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 0 1 0 0 0 1 0 0 1),
      (0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1),
      (0 0 0 0 0 0 0 0 1 0 1 1 1 0 1 1 0 0 0 0 0 0 1 1),
      (0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 1 1 1 0 1 0 1),
      (0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 1 0 1 1 1 0 1 0),
      (0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 1 1 1 0 0 1 1 0 0),
      (0 0 0 0 0 0 0 0 1 1 1 0 1 1 0 1 0 0 1 1 0 0 0 0),
      (0 0 0 0 0 0 0 0 0 1 1 0 1 1 1 0 0 1 0 0 0 1 1 0),
      (0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 1 1 0 1 0 0 1 0 1),
      (0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 1 1 0 1 0 0 1 1),
      (0 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 0 1 0 1 1 1 1),
      (0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 1 0 1 1 0 0 1)
  ]
  */


  /////////
  // STEP 4 - construct c[i] in C 
  //        - c[0] = (0 ... 0 )
  //        - for 1 <= i <= 7 let
  //          c[i] = a codeword of C with zeros in the first eight coordinates 
  //                 except coordinate i and coordinate 8
  /////////

  c := [] ;
  for i in [1..7] do
    for x in C do
      if x[i] eq 1 and
         x[8] eq 1 and
         IntegerRing()!(x[1]) +
         IntegerRing()!(x[2]) +
         IntegerRing()!(x[3]) +
         IntegerRing()!(x[4]) +
         IntegerRing()!(x[5]) +
         IntegerRing()!(x[6]) +
         IntegerRing()!(x[7]) +
         IntegerRing()!(x[8]) eq 2 then
        c[i] := x ;
      end if ;
    end for ;
  end for ;

  c[8] := ZeroMatrix(GF(2),1,24)[1] ;

  /*
  c;
  [
      (1 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 1 0 1 1 1),
      (0 1 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 1 1 0 1 1 0 0),
      (0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 1 1 1 0 0 1 0),
      (0 0 0 1 0 0 0 1 0 0 0 0 1 1 0 1 1 0 1 0 1 0 0 0),
      (0 0 0 0 1 0 0 1 0 0 0 0 1 1 0 0 1 1 0 0 0 1 0 1),
      (0 0 0 0 0 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 0 0 1 0),
      (0 0 0 0 0 0 1 1 0 0 0 0 1 0 0 1 1 1 1 1 1 1 1 1)
  ]
  */


  /////////
  // STEP 5 - let CC[j] j be the coset c[j] + CT 
  //          of CT in the extended Golay code C
  //          For 0 <= j <= 7
  /////////

  CC := [] ; 
  for j in [1..8] do
    CC[j] := [] ;
    for i in [1..#CT] do
      CC[j][i] := CT[i] + c[j] ;
    end for ;
  end for ;


  /////////
  // STEP 6 -  Let N be the union of the eight cosets CC[1], ..., CC[8] 
  /////////

  N := CC[1] cat CC[2] cat CC[3] cat CC[4] cat
       CC[5] cat CC[6] cat CC[7] cat CC[8] ;


  /////////
  // STEP 7 - The Nordstrom–Robinson code N16 
  //          is the code obtained by puncturing N on T 
  //          (set consisting of the first eight coordinates)
  /////////

  N16 := [] ;
  for i in [1..#N] do
    N16[i] := ZeroMatrix(GF(2),1,16)[1] ;
    for j in [1..Ncols(N[i])-8] do
      N16[i][j] := N[i][j+8] ;
    end for ;
  end for ;

  /*
  #N16 ;
  256

  N16 ; 
  [
      (0 0 0 0 1 0 1 0 0 0 0 1 0 1 1 1),
      (1 0 0 0 1 0 0 1 0 1 1 0 0 0 0 1),
      (1 1 0 0 1 1 0 1 1 0 0 1 1 1 0 1),
      (0 1 0 0 1 1 1 0 1 1 1 0 1 0 1 1),
      (0 1 1 0 1 0 1 1 0 0 0 0 1 0 0 0),
      (1 1 1 0 1 0 0 0 0 1 1 1 1 1 1 0),
      (1 0 1 0 1 1 0 0 1 0 0 0 0 0 1 0),
      (0 0 1 0 1 1 1 1 1 1 1 1 0 1 0 0),
      (0 0 1 1 1 1 0 1 0 0 1 1 1 0 1 1),
      (1 0 1 1 1 1 1 0 0 1 0 0 1 1 0 1),
      (1 1 1 1 1 0 1 0 1 0 1 1 0 0 0 1),
      (0 1 1 1 1 0 0 1 1 1 0 0 0 1 1 1),
      (0 1 0 1 1 1 0 0 0 0 1 0 0 1 0 0),
      (1 1 0 1 1 1 1 1 0 1 0 1 0 0 1 0),
      (1 0 0 1 1 0 1 1 1 0 1 0 1 1 1 0),
      (0 0 0 1 1 0 0 0 1 1 0 1 1 0 0 0),
      (0 0 0 1 0 1 1 1 1 0 0 0 0 0 0 1),
      (1 0 0 1 0 1 0 0 1 1 1 1 0 1 1 1),
      (1 1 0 1 0 0 0 0 0 0 0 0 1 0 1 1),
      (0 1 0 1 0 0 1 1 0 1 1 1 1 1 0 1),
      (0 1 1 1 0 1 1 0 1 0 0 1 1 1 1 0),
      (1 1 1 1 0 1 0 1 1 1 1 0 1 0 0 0),
      (1 0 1 1 0 0 0 1 0 0 0 1 0 1 0 0),
      (0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 0),
      (0 0 1 0 0 0 0 0 1 0 1 0 1 1 0 1),
      (1 0 1 0 0 0 1 1 1 1 0 1 1 0 1 1),
      (1 1 1 0 0 1 1 1 0 0 1 0 0 1 1 1),
      (0 1 1 0 0 1 0 0 0 1 0 1 0 0 0 1),
      (0 1 0 0 0 0 0 1 1 0 1 1 0 0 1 0),
      (1 1 0 0 0 0 1 0 1 1 0 0 0 1 0 0),
      (1 0 0 0 0 1 1 0 0 0 1 1 1 0 0 0),
      (0 0 0 0 0 1 0 1 0 1 0 0 1 1 1 0),
      (0 0 0 0 1 0 1 0 0 1 1 0 1 1 0 0),
      (1 0 0 0 1 0 0 1 0 0 0 1 1 0 1 0),
      (1 1 0 0 1 1 0 1 1 1 1 0 0 1 1 0),
      (0 1 0 0 1 1 1 0 1 0 0 1 0 0 0 0),
      (0 1 1 0 1 0 1 1 0 1 1 1 0 0 1 1),
      (1 1 1 0 1 0 0 0 0 0 0 0 0 1 0 1),
      (1 0 1 0 1 1 0 0 1 1 1 1 1 0 0 1),
      (0 0 1 0 1 1 1 1 1 0 0 0 1 1 1 1),
      (0 0 1 1 1 1 0 1 0 1 0 0 0 0 0 0),
      (1 0 1 1 1 1 1 0 0 0 1 1 0 1 1 0),
      (1 1 1 1 1 0 1 0 1 1 0 0 1 0 1 0),
      (0 1 1 1 1 0 0 1 1 0 1 1 1 1 0 0),
      (0 1 0 1 1 1 0 0 0 1 0 1 1 1 1 1),
      (1 1 0 1 1 1 1 1 0 0 1 0 1 0 0 1),
      (1 0 0 1 1 0 1 1 1 1 0 1 0 1 0 1),
      (0 0 0 1 1 0 0 0 1 0 1 0 0 0 1 1),
      (0 0 0 1 0 1 1 1 1 1 1 1 1 0 1 0),
      (1 0 0 1 0 1 0 0 1 0 0 0 1 1 0 0),
      (1 1 0 1 0 0 0 0 0 1 1 1 0 0 0 0),
      (0 1 0 1 0 0 1 1 0 0 0 0 0 1 1 0),
      (0 1 1 1 0 1 1 0 1 1 1 0 0 1 0 1),
      (1 1 1 1 0 1 0 1 1 0 0 1 0 0 1 1),
      (1 0 1 1 0 0 0 1 0 1 1 0 1 1 1 1),
      (0 0 1 1 0 0 1 0 0 0 0 1 1 0 0 1),
      (0 0 1 0 0 0 0 0 1 1 0 1 0 1 1 0),
      (1 0 1 0 0 0 1 1 1 0 1 0 0 0 0 0),
      (1 1 1 0 0 1 1 1 0 1 0 1 1 1 0 0),
      (0 1 1 0 0 1 0 0 0 0 1 0 1 0 1 0),
      (0 1 0 0 0 0 0 1 1 1 0 0 1 0 0 1),
      (1 1 0 0 0 0 1 0 1 0 1 1 1 1 1 1),
      (1 0 0 0 0 1 1 0 0 1 0 0 0 0 1 1),
      (0 0 0 0 0 1 0 1 0 0 1 1 0 1 0 1),
      (0 0 0 0 1 1 0 0 0 1 1 1 0 0 1 0),
      (1 0 0 0 1 1 1 1 0 0 0 0 0 1 0 0),
      (1 1 0 0 1 0 1 1 1 1 1 1 1 0 0 0),
      (0 1 0 0 1 0 0 0 1 0 0 0 1 1 1 0),
      (0 1 1 0 1 1 0 1 0 1 1 0 1 1 0 1),
      (1 1 1 0 1 1 1 0 0 0 0 1 1 0 1 1),
      (1 0 1 0 1 0 1 0 1 1 1 0 0 1 1 1),
      (0 0 1 0 1 0 0 1 1 0 0 1 0 0 0 1),
      (0 0 1 1 1 0 1 1 0 1 0 1 1 1 1 0),
      (1 0 1 1 1 0 0 0 0 0 1 0 1 0 0 0),
      (1 1 1 1 1 1 0 0 1 1 0 1 0 1 0 0),
      (0 1 1 1 1 1 1 1 1 0 1 0 0 0 1 0),
      (0 1 0 1 1 0 1 0 0 1 0 0 0 0 0 1),
      (1 1 0 1 1 0 0 1 0 0 1 1 0 1 1 1),
      (1 0 0 1 1 1 0 1 1 1 0 0 1 0 1 1),
      (0 0 0 1 1 1 1 0 1 0 1 1 1 1 0 1),
      (0 0 0 1 0 0 0 1 1 1 1 0 0 1 0 0),
      (1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0),
      (1 1 0 1 0 1 1 0 0 1 1 0 1 1 1 0),
      (0 1 0 1 0 1 0 1 0 0 0 1 1 0 0 0),
      (0 1 1 1 0 0 0 0 1 1 1 1 1 0 1 1),
      (1 1 1 1 0 0 1 1 1 0 0 0 1 1 0 1),
      (1 0 1 1 0 1 1 1 0 1 1 1 0 0 0 1),
      (0 0 1 1 0 1 0 0 0 0 0 0 0 1 1 1),
      (0 0 1 0 0 1 1 0 1 1 0 0 1 0 0 0),
      (1 0 1 0 0 1 0 1 1 0 1 1 1 1 1 0),
      (1 1 1 0 0 0 0 1 0 1 0 0 0 0 1 0),
      (0 1 1 0 0 0 1 0 0 0 1 1 0 1 0 0),
      (0 1 0 0 0 1 1 1 1 1 0 1 0 1 1 1),
      (1 1 0 0 0 1 0 0 1 0 1 0 0 0 0 1),
      (1 0 0 0 0 0 0 0 0 1 0 1 1 1 0 1),
      (0 0 0 0 0 0 1 1 0 0 1 0 1 0 1 1),
      (0 0 0 0 1 1 0 1 1 0 1 0 1 0 0 0),
      (1 0 0 0 1 1 1 0 1 1 0 1 1 1 1 0),
      (1 1 0 0 1 0 1 0 0 0 1 0 0 0 1 0),
      (0 1 0 0 1 0 0 1 0 1 0 1 0 1 0 0),
      (0 1 1 0 1 1 0 0 1 0 1 1 0 1 1 1),
      (1 1 1 0 1 1 1 1 1 1 0 0 0 0 0 1),
      (1 0 1 0 1 0 1 1 0 0 1 1 1 1 0 1),
      (0 0 1 0 1 0 0 0 0 1 0 0 1 0 1 1),
      (0 0 1 1 1 0 1 0 1 0 0 0 0 1 0 0),
      (1 0 1 1 1 0 0 1 1 1 1 1 0 0 1 0),
      (1 1 1 1 1 1 0 1 0 0 0 0 1 1 1 0),
      (0 1 1 1 1 1 1 0 0 1 1 1 1 0 0 0),
      (0 1 0 1 1 0 1 1 1 0 0 1 1 0 1 1),
      (1 1 0 1 1 0 0 0 1 1 1 0 1 1 0 1),
      (1 0 0 1 1 1 0 0 0 0 0 1 0 0 0 1),
      (0 0 0 1 1 1 1 1 0 1 1 0 0 1 1 1),
      (0 0 0 1 0 0 0 0 0 0 1 1 1 1 1 0),
      (1 0 0 1 0 0 1 1 0 1 0 0 1 0 0 0),
      (1 1 0 1 0 1 1 1 1 0 1 1 0 1 0 0),
      (0 1 0 1 0 1 0 0 1 1 0 0 0 0 1 0),
      (0 1 1 1 0 0 0 1 0 0 1 0 0 0 0 1),
      (1 1 1 1 0 0 1 0 0 1 0 1 0 1 1 1),
      (1 0 1 1 0 1 1 0 1 0 1 0 1 0 1 1),
      (0 0 1 1 0 1 0 1 1 1 0 1 1 1 0 1),
      (0 0 1 0 0 1 1 1 0 0 0 1 0 0 1 0),
      (1 0 1 0 0 1 0 0 0 1 1 0 0 1 0 0),
      (1 1 1 0 0 0 0 0 1 0 0 1 1 0 0 0),
      (0 1 1 0 0 0 1 1 1 1 1 0 1 1 1 0),
      (0 1 0 0 0 1 1 0 0 0 0 0 1 1 0 1),
      (1 1 0 0 0 1 0 1 0 1 1 1 1 0 1 1),
      (1 0 0 0 0 0 0 1 1 0 0 0 0 1 1 1),
      (0 0 0 0 0 0 1 0 1 1 1 1 0 0 0 1),
      (0 0 0 0 1 1 0 0 1 1 0 0 0 1 0 1),
      (1 0 0 0 1 1 1 1 1 0 1 1 0 0 1 1),
      (1 1 0 0 1 0 1 1 0 1 0 0 1 1 1 1),
      (0 1 0 0 1 0 0 0 0 0 1 1 1 0 0 1),
      (0 1 1 0 1 1 0 1 1 1 0 1 1 0 1 0),
      (1 1 1 0 1 1 1 0 1 0 1 0 1 1 0 0),
      (1 0 1 0 1 0 1 0 0 1 0 1 0 0 0 0),
      (0 0 1 0 1 0 0 1 0 0 1 0 0 1 1 0),
      (0 0 1 1 1 0 1 1 1 1 1 0 1 0 0 1),
      (1 0 1 1 1 0 0 0 1 0 0 1 1 1 1 1),
      (1 1 1 1 1 1 0 0 0 1 1 0 0 0 1 1),
      (0 1 1 1 1 1 1 1 0 0 0 1 0 1 0 1),
      (0 1 0 1 1 0 1 0 1 1 1 1 0 1 1 0),
      (1 1 0 1 1 0 0 1 1 0 0 0 0 0 0 0),
      (1 0 0 1 1 1 0 1 0 1 1 1 1 1 0 0),
      (0 0 0 1 1 1 1 0 0 0 0 0 1 0 1 0),
      (0 0 0 1 0 0 0 1 0 1 0 1 0 0 1 1),
      (1 0 0 1 0 0 1 0 0 0 1 0 0 1 0 1),
      (1 1 0 1 0 1 1 0 1 1 0 1 1 0 0 1),
      (0 1 0 1 0 1 0 1 1 0 1 0 1 1 1 1),
      (0 1 1 1 0 0 0 0 0 1 0 0 1 1 0 0),
      (1 1 1 1 0 0 1 1 0 0 1 1 1 0 1 0),
      (1 0 1 1 0 1 1 1 1 1 0 0 0 1 1 0),
      (0 0 1 1 0 1 0 0 1 0 1 1 0 0 0 0),
      (0 0 1 0 0 1 1 0 0 1 1 1 1 1 1 1),
      (1 0 1 0 0 1 0 1 0 0 0 0 1 0 0 1),
      (1 1 1 0 0 0 0 1 1 1 1 1 0 1 0 1),
      (0 1 1 0 0 0 1 0 1 0 0 0 0 0 1 1),
      (0 1 0 0 0 1 1 1 0 1 1 0 0 0 0 0),
      (1 1 0 0 0 1 0 0 0 0 0 1 0 1 1 0),
      (1 0 0 0 0 0 0 0 1 1 1 0 1 0 1 0),
      (0 0 0 0 0 0 1 1 1 0 0 1 1 1 0 0),
      (0 0 0 0 1 0 1 1 1 1 0 0 0 0 1 0),
      (1 0 0 0 1 0 0 0 1 0 1 1 0 1 0 0),
      (1 1 0 0 1 1 0 0 0 1 0 0 1 0 0 0),
      (0 1 0 0 1 1 1 1 0 0 1 1 1 1 1 0),
      (0 1 1 0 1 0 1 0 1 1 0 1 1 1 0 1),
      (1 1 1 0 1 0 0 1 1 0 1 0 1 0 1 1),
      (1 0 1 0 1 1 0 1 0 1 0 1 0 1 1 1),
      (0 0 1 0 1 1 1 0 0 0 1 0 0 0 0 1),
      (0 0 1 1 1 1 0 0 1 1 1 0 1 1 1 0),
      (1 0 1 1 1 1 1 1 1 0 0 1 1 0 0 0),
      (1 1 1 1 1 0 1 1 0 1 1 0 0 1 0 0),
      (0 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0),
      (0 1 0 1 1 1 0 1 1 1 1 1 0 0 0 1),
      (1 1 0 1 1 1 1 0 1 0 0 0 0 1 1 1),
      (1 0 0 1 1 0 1 0 0 1 1 1 1 0 1 1),
      (0 0 0 1 1 0 0 1 0 0 0 0 1 1 0 1),
      (0 0 0 1 0 1 1 0 0 1 0 1 0 1 0 0),
      (1 0 0 1 0 1 0 1 0 0 1 0 0 0 1 0),
      (1 1 0 1 0 0 0 1 1 1 0 1 1 1 1 0),
      (0 1 0 1 0 0 1 0 1 0 1 0 1 0 0 0),
      (0 1 1 1 0 1 1 1 0 1 0 0 1 0 1 1),
      (1 1 1 1 0 1 0 0 0 0 1 1 1 1 0 1),
      (1 0 1 1 0 0 0 0 1 1 0 0 0 0 0 1),
      (0 0 1 1 0 0 1 1 1 0 1 1 0 1 1 1),
      (0 0 1 0 0 0 0 1 0 1 1 1 1 0 0 0),
      (1 0 1 0 0 0 1 0 0 0 0 0 1 1 1 0),
      (1 1 1 0 0 1 1 0 1 1 1 1 0 0 1 0),
      (0 1 1 0 0 1 0 1 1 0 0 0 0 1 0 0),
      (0 1 0 0 0 0 0 0 0 1 1 0 0 1 1 1),
      (1 1 0 0 0 0 1 1 0 0 0 1 0 0 0 1),
      (1 0 0 0 0 1 1 1 1 1 1 0 1 1 0 1),
      (0 0 0 0 0 1 0 0 1 0 0 1 1 0 1 1),
      (0 0 0 0 1 0 0 1 1 1 1 1 1 1 1 1),
      (1 0 0 0 1 0 1 0 1 0 0 0 1 0 0 1),
      (1 1 0 0 1 1 1 0 0 1 1 1 0 1 0 1),
      (0 1 0 0 1 1 0 1 0 0 0 0 0 0 1 1),
      (0 1 1 0 1 0 0 0 1 1 1 0 0 0 0 0),
      (1 1 1 0 1 0 1 1 1 0 0 1 0 1 1 0),
      (1 0 1 0 1 1 1 1 0 1 1 0 1 0 1 0),
      (0 0 1 0 1 1 0 0 0 0 0 1 1 1 0 0),
      (0 0 1 1 1 1 1 0 1 1 0 1 0 0 1 1),
      (1 0 1 1 1 1 0 1 1 0 1 0 0 1 0 1),
      (1 1 1 1 1 0 0 1 0 1 0 1 1 0 0 1),
      (0 1 1 1 1 0 1 0 0 0 1 0 1 1 1 1),
      (0 1 0 1 1 1 1 1 1 1 0 0 1 1 0 0),
      (1 1 0 1 1 1 0 0 1 0 1 1 1 0 1 0),
      (1 0 0 1 1 0 0 0 0 1 0 0 0 1 1 0),
      (0 0 0 1 1 0 1 1 0 0 1 1 0 0 0 0),
      (0 0 0 1 0 1 0 0 0 1 1 0 1 0 0 1),
      (1 0 0 1 0 1 1 1 0 0 0 1 1 1 1 1),
      (1 1 0 1 0 0 1 1 1 1 1 0 0 0 1 1),
      (0 1 0 1 0 0 0 0 1 0 0 1 0 1 0 1),
      (0 1 1 1 0 1 0 1 0 1 1 1 0 1 1 0),
      (1 1 1 1 0 1 1 0 0 0 0 0 0 0 0 0),
      (1 0 1 1 0 0 1 0 1 1 1 1 1 1 0 0),
      (0 0 1 1 0 0 0 1 1 0 0 0 1 0 1 0),
      (0 0 1 0 0 0 1 1 0 1 0 0 0 1 0 1),
      (1 0 1 0 0 0 0 0 0 0 1 1 0 0 1 1),
      (1 1 1 0 0 1 0 0 1 1 0 0 1 1 1 1),
      (0 1 1 0 0 1 1 1 1 0 1 1 1 0 0 1),
      (0 1 0 0 0 0 1 0 0 1 0 1 1 0 1 0),
      (1 1 0 0 0 0 0 1 0 0 1 0 1 1 0 0),
      (1 0 0 0 0 1 0 1 1 1 0 1 0 0 0 0),
      (0 0 0 0 0 1 1 0 1 0 1 0 0 1 1 0),
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0),
      (1 0 0 0 0 0 1 1 0 1 1 1 0 1 1 0),
      (1 1 0 0 0 1 1 1 1 0 0 0 1 0 1 0),
      (0 1 0 0 0 1 0 0 1 1 1 1 1 1 0 0),
      (0 1 1 0 0 0 0 1 0 0 0 1 1 1 1 1),
      (1 1 1 0 0 0 1 0 0 1 1 0 1 0 0 1),
      (1 0 1 0 0 1 1 0 1 0 0 1 0 1 0 1),
      (0 0 1 0 0 1 0 1 1 1 1 0 0 0 1 1),
      (0 0 1 1 0 1 1 1 0 0 1 0 1 1 0 0),
      (1 0 1 1 0 1 0 0 0 1 0 1 1 0 1 0),
      (1 1 1 1 0 0 0 0 1 0 1 0 0 1 1 0),
      (0 1 1 1 0 0 1 1 1 1 0 1 0 0 0 0),
      (0 1 0 1 0 1 1 0 0 0 1 1 0 0 1 1),
      (1 1 0 1 0 1 0 1 0 1 0 0 0 1 0 1),
      (1 0 0 1 0 0 0 1 1 0 1 1 1 0 0 1),
      (0 0 0 1 0 0 1 0 1 1 0 0 1 1 1 1),
      (0 0 0 1 1 1 0 1 1 0 0 1 0 1 1 0),
      (1 0 0 1 1 1 1 0 1 1 1 0 0 0 0 0),
      (1 1 0 1 1 0 1 0 0 0 0 1 1 1 0 0),
      (0 1 0 1 1 0 0 1 0 1 1 0 1 0 1 0),
      (0 1 1 1 1 1 0 0 1 0 0 0 1 0 0 1),
      (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1),
      (1 0 1 1 1 0 1 1 0 0 0 0 0 0 1 1),
      (0 0 1 1 1 0 0 0 0 1 1 1 0 1 0 1),
      (0 0 1 0 1 0 1 0 1 0 1 1 1 0 1 0),
      (1 0 1 0 1 0 0 1 1 1 0 0 1 1 0 0),
      (1 1 1 0 1 1 0 1 0 0 1 1 0 0 0 0),
      (0 1 1 0 1 1 1 0 0 1 0 0 0 1 1 0),
      (0 1 0 0 1 0 1 1 1 0 1 0 0 1 0 1),
      (1 1 0 0 1 0 0 0 1 1 0 1 0 0 1 1),
      (1 0 0 0 1 1 0 0 0 0 1 0 1 1 1 1),
      (0 0 0 0 1 1 1 1 0 1 0 1 1 0 0 1)
  ]

  */

  return Matrix(N16) ;
end intrinsic ;
</code>
</pre>

<script>
var chapter = 'programming' ;
var x = document.getElementById("temp-content") ;
document.getElementById("main").innerHTML = x.innerHTML ;
</script>

<!--
-->

